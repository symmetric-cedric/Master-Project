import os
import numpy as np
import subprocess

def extract_mode(data, mode):
    start_index = 0
    for i, line in enumerate(data):
        if line.strip().startswith("Atom  AN"):
            start_index = i + 1
            break
    displacements = []
    for line in data[start_index:]:
        if not line.strip():
            continue
        parts = line.split()
        if len(parts) < 4:
            continue
        base_index = 2 + (mode - 1) * 3
        coords = parts[base_index:base_index + 3]
        displacements.append([float(c) for c in coords])
    return np.array(displacements)

def extract_coordinates(data):
    coordinates = []
    for line in data:
        parts = line.split()
        if len(parts) < 4:
            continue
        coords = [float(parts[1]), float(parts[2]), float(parts[3])]
        coordinates.append(coords)
    return np.array(coordinates)

def displace_atoms(atom_coords, freq_displacements, magnitude):
    return atom_coords + magnitude * freq_displacements

def format_output(displaced_coords, atomic_data):
    formatted_output = []
    for line, coords in zip(atomic_data, displaced_coords):
        parts = line.split()
        formatted_line = f"{parts[0]:<2}  {coords[0]:>10.6f}  {coords[1]:>10.6f}  {coords[2]:>10.6f}"
        formatted_output.append(formatted_line)
    return formatted_output

def update_com_file(template_path, new_path, new_coords_lines):
    with open(template_path, 'r') as f:
        lines = f.readlines()

    charge_line_index = None
    for idx, line in enumerate(lines):
        parts = line.strip().split()
        if len(parts) == 2:
            try:
                float(parts[0])
                float(parts[1])
                charge_line_index = idx
                break
            except ValueError:
                continue
    if charge_line_index is None:
        raise ValueError("Could not find charge/multiplicity line in .com file.")

    new_file_lines = lines[:charge_line_index + 1]

    coord_end_index = charge_line_index + 1
    while coord_end_index < len(lines) and lines[coord_end_index].strip():
        coord_end_index += 1

    new_file_lines.extend([line + "\n" for line in new_coords_lines])

    if coord_end_index < len(lines) and lines[coord_end_index].strip() == "":
        new_file_lines.append("\n")
        new_file_lines.extend(lines[coord_end_index + 1:])
    else:
        new_file_lines.extend(lines[coord_end_index:])

    with open(new_path, 'w') as f:
        f.writelines(new_file_lines)

def submit_job(mode, label, working_dir):
    sh_script_path = os.path.join(working_dir, "Generic_Submission.sh")
    try:
        subprocess.run([
            "qsub",
            "-v", f"MODE={mode},LABEL={label}",
            sh_script_path
        ], check=True)
        print(f"Job submitted for mode {mode}, label {label}")
    except subprocess.CalledProcessError as e:
        print(f"Failed to submit job: {e}")

def main():
    base_dir = os.path.dirname(os.path.abspath(__file__))
    unshifted_com = os.path.join(base_dir, "Unshifted", "Benzene_Final.com")

    print("Paste frequency data (END to finish):")
    frequency_data = []
    while True:
        line = input()
        if line.strip().upper() == "END":
            break
        frequency_data.append(line.rstrip())

    header_tokens = []
    for line in frequency_data:
        if line.strip():
            header_tokens = line.split()
            break

    while True:
        try:
            user_mode_input = int(input("Enter mode number: "))
            if str(user_mode_input) in header_tokens:
                mode_index = header_tokens.index(str(user_mode_input)) + 1
                print(f"Found mode {user_mode_input} at index {mode_index}")
            else:
                mode_index = user_mode_input % 3
                if mode_index == 0:
                    mode_index = 3
                print(f"Using modulo index: {mode_index}")
            break
        except ValueError:
            print("Please enter a valid integer.")

    print("Paste atomic coordinates (END to finish):")
    atomic_data = []
    while True:
        line = input()
        if line.strip().upper() == "END":
            break
        atomic_data.append(line.rstrip())

    print("Enter displacement magnitudes (END to finish):")
    magnitudes = []
    while True:
        line = input()
        if line.strip().upper() == "END":
            break
        try:
            magnitudes.append(float(line))
        except ValueError:
            print("Invalid float.")

    freq_displacements = extract_mode(frequency_data, mode_index)
    atom_coords = extract_coordinates(atomic_data)

    output_dir = os.path.join(base_dir, f"Shift_{user_mode_input}")
    os.makedirs(output_dir, exist_ok=True)

    for mag in magnitudes:
        displaced = displace_atoms(atom_coords, freq_displacements, mag)
        formatted = format_output(displaced, atomic_data)
        label = f"{user_mode_input}_{mag:.8f}".rstrip("0").rstrip(".")
        filename = f"Benzene_Shift_{label}.com"
        output_path = os.path.join(output_dir, filename)
        update_com_file(unshifted_com, output_path, formatted)
        print(f"Written: {output_path}")
        submit_job(user_mode_input, label, base_dir)

if __name__ == "__main__":
    main()
